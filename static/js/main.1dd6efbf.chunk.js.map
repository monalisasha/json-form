{"version":3,"sources":["components/JSONForm/index.js","utils/index.js","constant/index.js","App.js","reportWebVitals.js","index.js"],"names":["JSONForm","props","configData","handleOnSubmit","handleOnReset","useState","jsonFormData","setJSONFormData","errorData","setErrorData","setInputValue","keyName","value","className","onSubmit","event","preventDefault","requiredFields","filter","config","isRequired","map","name","error","forEach","element","Object","keys","length","noValidate","dateValue","type","human_label","conditional","date","Date","ye","Intl","DateTimeFormat","year","format","mo","month","da","day","getDateValue","show_if","checked","onChange","target","onClick","JSONConfigData","tag","now","getFullYear","getMonth","getDate","App","formData","setFormData","style","flex","data","JSON","parse","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1dd6efbf.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { getDateValue } from '../../utils';\n\nconst JSONForm = (props) => {\n  const { configData = [], handleOnSubmit, handleOnReset } = props;\n  const [jsonFormData, setJSONFormData] = useState({});\n  const [errorData, setErrorData] = useState(null);\n\n  const setInputValue = (keyName, value) => {\n    setJSONFormData({\n      ...jsonFormData,\n      [keyName]: value,\n    });\n  };\n\n  const resetForm = (event) => {\n    event.preventDefault();\n    setJSONFormData({});\n    setErrorData(null);\n    handleOnReset();\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    const requiredFields = configData\n      .filter((config) => config.isRequired)\n      .map((config) => config.name);\n    let error = {};\n    requiredFields.forEach((element) => {\n      if (!jsonFormData[element]) {\n        error[element] = 'This is required field';\n      }\n    });\n    if (Object.keys(error).length) {\n      setErrorData(error);\n    } else {\n      setErrorData(null);\n      handleOnSubmit(jsonFormData);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <form onSubmit={onSubmit} noValidate>\n        {configData.map((config) => {\n          const {\n            name = '',\n            type = 'text',\n            human_label = '',\n            conditional,\n            isRequired,\n          } = config;\n          const value = jsonFormData[name] || '';\n          let dateValue;\n          if (type === 'date' && value) {\n            dateValue = getDateValue(value);\n          }\n          if (\n            !conditional ||\n            conditional.show_if(jsonFormData[conditional.name])\n          )\n            return (\n              <div key={name}>\n                <label>\n                  {human_label} {isRequired ? '* ' : ''}\n                </label>\n                <br></br>\n                {type === 'checkbox' ? (\n                  <input\n                    checked={value}\n                    type={type}\n                    name={name}\n                    onChange={(event) =>\n                      setInputValue(name, event.target.checked)\n                    }\n                  />\n                ) : (\n                  <input\n                    value={dateValue || value}\n                    type={type}\n                    name={name}\n                    onChange={(event) =>\n                      setInputValue(\n                        name,\n                        type === 'date'\n                          ? new Date(event.target.value)\n                          : event.target.value,\n                      )\n                    }\n                  />\n                )}\n                <span className=\"error\">{errorData?.[name]}</span>\n              </div>\n            );\n          return null;\n        })}\n        <div>\n          <button onClick={resetForm}>Reset</button>\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default JSONForm;\n","function getDateValue(value) {\n  let date = new Date(value);\n  let ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date);\n  let mo = new Intl.DateTimeFormat('en', { month: '2-digit' }).format(date);\n  let da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date);\n  return `${ye}-${mo}-${da}`;\n}\n\nexport { getDateValue };\n","const JSONConfigData = [\n  {\n    tag: 'input',\n    name: 'first_name',\n    type: 'text',\n    human_label: 'First Name',\n  },\n  {\n    tag: 'input',\n    name: 'last_name',\n    type: 'text',\n    human_label: 'Last Name',\n    isRequired: true,\n  },\n  {\n    tag: 'input',\n    name: 'email',\n    type: 'email',\n    human_label: 'Email Address',\n  },\n  {\n    tag: 'input',\n    name: 'phone_number',\n    type: 'text',\n    human_label: 'Phone Number',\n    isRequired: true,\n  },\n  {\n    tag: 'input',\n    name: 'job_title',\n    type: 'text',\n    human_label: 'Job Title',\n  },\n  {\n    tag: 'input',\n    name: 'date_of_birth',\n    type: 'date',\n    human_label: 'Date of Birth',\n  },\n  {\n    tag: 'input',\n    name: 'parental_consent',\n    type: 'checkbox',\n    human_label: 'Parental Consent',\n    conditional: {\n      name: 'date_of_birth',\n      show_if: (value) => {\n        const now = new Date();\n        return (\n          value >=\n          new Date(now.getFullYear() - 13, now.getMonth(), now.getDate())\n        );\n      },\n    },\n  },\n];\n\nexport { JSONConfigData };\n","import React, { useState } from 'react';\nimport './App.css';\nimport JSONForm from './components/JSONForm';\nimport { JSONConfigData } from './constant';\n\nfunction App() {\n  const [formData, setFormData] = useState(null);\n\n  const handleOnSubmit = (data) => {\n    setFormData(JSON.parse(JSON.stringify(data)));\n  };\n\n  const handleOnReset = () => {\n    setFormData(null);\n  };\n\n  return (\n    <div className=\"App\">\n      <div style={{ flex: 1 }}>\n        <JSONForm\n          configData={JSONConfigData}\n          handleOnSubmit={handleOnSubmit}\n          handleOnReset={handleOnReset}\n        />\n      </div>\n      <div style={{ flex: 1 }}>\n        {formData ? <pre>{JSON.stringify(formData, null, '\\t')}</pre> : null}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}